import React, { useState } from 'react'
import Input from '../../input/Input'
import PasswordInput from '../../password-input/PasswordInput';
import styles from './registration-page.module.css'
import Button from '../../button/Button';
import { createConfirmPasswordRules, loginValidationRules, passwordValidationRules } from '../../utils/validation-rules';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../hooks/useAuth';

export default function RegistrationPage() {
    const navigate = useNavigate();
    const { register, isLoading } = useAuth();
    const [login, setLogin] = useState<string>('');
    const [password, setPassword] = useState<string>('');
    const [confirmPassword, setConfirmPassword] = useState<string>('');
    const [displayName, setDisplayName] = useState<string>('');
    const [formError, setFormError] = useState<string>('');

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setFormError('');
        if (password !== confirmPassword) {
            setFormError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        };

        try {
            const registerData = {
                login,
                password,
                displayName: displayName.trim() || login
            };

            console.log('Sending registration data:', registerData);

            const response = await register(registerData);
            console.log('Registration response:', response);

            if (response && response.user && response.user.recoveryCode) {
                console.log('Navigation to recovery code page with:', {
                    recoveryCode: response.user.recoveryCode,
                    login: response.user.login
                });

                navigate('/recovery-code', {
                    state: {
                        recoveryCode: response.user.recoveryCode,
                        login: response.user.login
                    }
                });
            } else {
                console.log('Invalid response format:', response);
                setFormError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', err)
        }
    };

    return (
        <div className={styles.container}>
            <h1 className={styles.title}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
            <p className={styles.logo}>–õ–∏—Å—Ç–∞–πüçÉ–ó–Ω–∞–π</p>
            <h2 className={styles.subtitle}>–î–æ–±—Ä–æ–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
            <Input
                onChange={(e) => setLogin(e.target.value)}
                value={login}
                title='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
                placeholder='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –æ—Ç 4 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤'
                validationRules={loginValidationRules}
                required
            />
            <Input
                onChange={(e) => setDisplayName(e.target.value)}
                value={displayName}
                title='–í–≤–µ–¥–∏—Ç–µ –∏–º—è'
                placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            />
            <PasswordInput
                title='–ü–∞—Ä–æ–ª—å'
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –æ—Ç 6 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤'
                validationRules={passwordValidationRules}
                required
            />
            <PasswordInput
                title='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑'
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å'
                validationRules={createConfirmPasswordRules(password)}
                required
            />
            <Button width='large' onClick={handleSubmit} text={isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞' : '–î–∞–ª–µ–µ'} disabled={isLoading || password !== confirmPassword} />
            <div className={styles.already_register}>
                <p>–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?</p>
                <a href='/login' className={styles.login_link} >–í–æ–π—Ç–∏</a>
            </div>

        </div>
    )
}
